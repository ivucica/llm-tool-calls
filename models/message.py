import pydantic
import typing

class Message(pydantic.BaseModel):
    """A message in a conversation."""
    role: str = pydantic.Field(..., description="The role of the message sender")
    # Permitted values for role:
    # * system: messages added by the model developer (in this case us!)
    # * developer: from the application developer (this is us here, too)
    # * user: input from end users, or generally data to provide to the model
    # * assistant: generated by the  model
    # * tool: generated by a program (code execution, an API call)
    content: str|None = pydantic.Field(None, description="The content of the message (may be omitted if only tool calls are requested)", skip_defaults=True)
    message_id: typing.Optional[str] = pydantic.Field(default=None, exclude=True)
    parent_message_id: typing.Optional[str] = pydantic.Field(default=None, exclude=True)
    recipient: typing.Optional[str] = pydantic.Field(default=None, description="The recipient of the message, e.g. browser for general tool use, or functions.foo for JSON-formatted function calling", exclude_unset=True)

    # Example of multimodal content, as JSON:
    # [
    #     {"type": "text", "text": "What's in this image?"},
    #     {
    #         "type": "image_url",
    #         "image_url": {
    #             "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
    #         },
    #     },
    # ],
    #
    # or
    #   "url": f"data:image/jpeg;base64,{base64_image}",
